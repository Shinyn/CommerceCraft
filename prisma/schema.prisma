generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  user_id    String
  title      String
  Products   Product[]   @relation("StoreRelation")
  Categories Category[]  @relation("StoreRelation")
  Billboards Billboard[] @relation("StoreRelation")
  Sizes      Size[]      @relation("StoreRelation")
  Colors     Color[]     @relation("StoreRelation")
  Orders     Order[]     @relation("StoreRelation")
  Customers  Customer[]  @relation("StoreRelation")
}

model Product {
  id           String  @id @default(uuid())
  storeId      String
  title        String
  description  String
  ingredients  String  @default("Bobs")
  price        Int
  image        String
  manufacturer String  @default("BOB")
  category     String  @default("all")
  size         String  @default("kg")
  color        String  @default("yellow")
  isarchived   Boolean @default(false)
  isfeatured   Boolean @default(false)
  stock        Int     @default(0)
  store        Store   @relation("StoreRelation", fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([storeId])
}

model Category {
  id      String @id @default(uuid())
  storeId String
  title   String
  store   Store  @relation("StoreRelation", fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([storeId])
}

model Billboard {
  id      String @id @default(uuid())
  storeId String
  text    String
  image   String
  active  Int    @default(0)
  store   Store  @relation("StoreRelation", fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([storeId])
}

model Size {
  id      String @id @default(uuid())
  storeId String
  title   String
  store   Store  @relation("StoreRelation", fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([storeId])
}

model Color {
  id      String @id @default(uuid())
  storeId String
  title   String
  hex     String @default("")
  store   Store  @relation("StoreRelation", fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([storeId])
}

model Order {
  id           String      @id @default(uuid())
  storeId      String
  order_number Int         @unique
  order_date   DateTime    @default(now())
  order_status String      @default("Pending")
  order_total  Int
  customerId   String      @default("Not specified")
  order_items  OrderItem[] @relation("Orderrelation")
  store        Store       @relation("StoreRelation", fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customer     Customer    @relation("CustomerRelation", fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([customerId])
  @@index([storeId])
}

model OrderItem {
  id      Int    @id @default(autoincrement())
  title   String
  amount  Int
  price   Float
  orderId Int
  Order   Order  @relation("Orderrelation", fields: [orderId], references: [order_number])

  @@index([orderId])
}

model Customer {
  id             String  @id @default(uuid())
  storeId        String
  firstName      String
  lastName       String
  street         String
  zipCode        String
  city           String
  numberOfOrders Int     @default(1)
  phone          String
  e_mail         String  @unique
  store          Store   @relation("StoreRelation", fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Order          Order[] @relation("CustomerRelation")

  @@index([storeId])
}
